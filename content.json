{"meta":{"title":"王刘坤的博客","subtitle":"","description":"一个帅帅的小帅","author":"王刘坤","url":"http://example.com","root":"/"},"pages":[{"title":"关于我","date":"2021-08-31T07:07:27.000Z","updated":"2021-09-02T12:12:27.912Z","comments":false,"path":"about/index.html","permalink":"http://example.com/about/index.html","excerpt":"","text":"前言说明这是我第一次尝试自己部署发布博客，利用hexo+github的技术，主题采用的是目前比较火的也是用的人比较多的一个主题NEXT，内容正在一点点完善，希望大家指正！！！ 关于我毕业院校：长江大学 学历说明：研究生在读 活跃城市：武汉 爱好：羽毛球、跑步、音乐、美女 学无止境研究领域： Java Python"},{"title":"分类","date":"2020-01-21T04:12:26.000Z","updated":"2021-09-01T06:15:14.197Z","comments":true,"path":"categories/index.html","permalink":"http://example.com/categories/index.html","excerpt":"","text":""},{"title":"标签","date":"2021-09-01T05:35:30.000Z","updated":"2021-09-01T06:15:26.024Z","comments":true,"path":"tags/index.html","permalink":"http://example.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"Java连接Mysql数据库存取图片","slug":"Java连接Mysql数据库存取图片","date":"2022-04-14T02:39:54.000Z","updated":"2022-04-14T02:46:12.076Z","comments":true,"path":"2022/04/14/Java连接Mysql数据库存取图片/","link":"","permalink":"http://example.com/2022/04/14/Java%E8%BF%9E%E6%8E%A5Mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%98%E5%8F%96%E5%9B%BE%E7%89%87/","excerpt":"","text":"1、创建数据库CREATE TABLE &#96;img_table&#96; ( &#96;id&#96; int(11) NOT NULL AUTO_INCREMENT, &#96;name&#96; varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL, &#96;type&#96; varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL, &#96;photo&#96; mediumblob NULL, PRIMARY KEY (&#96;id&#96;) USING BTREE ) ENGINE &#x3D; InnoDB AUTO_INCREMENT &#x3D; 3 CHARACTER SET &#x3D; utf8 COLLATE &#x3D; utf8_general_ci ROW_FORMAT &#x3D; Compact; 2、数据库连接package chapter.img; import java.sql.Connection; import java.sql.DriverManager; import java.sql.SQLException; /** * @author Wang * @date 2021/12/24 0024 16:27 * description */ public class DBUtil &#123; public static final String DRIVER_CLASS_NAME = \"com.mysql.jdbc.Driver\"; public static final String URL = \"jdbc:mysql://localhost:3306/test??useUnicode=true&amp;useSSL=false&amp;characterEncoding=utf8&amp;serverTimezone=Asia/Shanghai\"; public static final String USERNAME = \"root\"; public static final String PASSWORD = \"\"; static &#123; try &#123; Class.forName(DRIVER_CLASS_NAME); &#125; catch (ClassNotFoundException e)&#123; System.out.println(\"注册失败！\"); e.printStackTrace(); &#125; &#125; public static Connection getConn() throws SQLException &#123; return DriverManager.getConnection(URL, USERNAME, PASSWORD); &#125; // 关闭连接 public static void closeConn(Connection connection)&#123; if(null != connection)&#123; try &#123; connection.close(); &#125; catch (SQLException e)&#123; System.out.println(\"关闭数据库连接失败！\"); e.printStackTrace(); &#125; &#125; &#125; &#125; 3、图片流package chapter.img; import java.io.*; /** * @author Wang * @date 2021/12/24 0024 16:33 * description */ public class ImageUtil &#123; // 读取本地图片获取输入流 public static FileInputStream readImage(String path) throws FileNotFoundException &#123; return new FileInputStream(new File(path)); &#125; // 读取表中图片获取输入流 public static void readBin2Image(InputStream in, String targetPath)&#123; File file = new File(targetPath); String path = targetPath.substring(0, targetPath.lastIndexOf(\"/\")); if(!file.exists())&#123; new File(path).mkdir(); &#125; FileOutputStream fos = null; try &#123; fos = new FileOutputStream(file); int len = 0; byte[] buf = new byte[1024]; while ((len = in.read(buf)) != -1)&#123; fos.write(buf, 0, len); &#125; fos.flush(); &#125; catch (Exception e)&#123; e.printStackTrace(); &#125; finally &#123; if(null != fos)&#123; try &#123; fos.close(); &#125; catch (IOException e)&#123; e.printStackTrace(); &#125; &#125; &#125; &#125; &#125; 4、转码存储package chapter.img; import java.io.FileInputStream; import java.io.InputStream; import java.sql.Connection; import java.sql.PreparedStatement; import java.sql.ResultSet; import java.sql.SQLException; /** * @author Wang * @date 2021/12/24 0024 16:41 * description */ public class ImageDemo &#123; // 将图片插入数据库 public static void readImage2DB()&#123; String path = \"F:\\\\04.JavaLearning\\\\QianFengEdu\\\\src\\\\chapter\\\\images\\\\1.png\"; Connection connection = null; PreparedStatement preparedStatement = null; FileInputStream in = null; try &#123; in = ImageUtil.readImage(path); connection = DBUtil.getConn(); String sql = \"INSERT INTO img_table(name, type, photo) VALUES(?, ?, ?)\"; preparedStatement = connection.prepareStatement(sql); preparedStatement.setString(1, \"curry\"); preparedStatement.setString(2,\"nba\"); preparedStatement.setBinaryStream(3, in, in.available()); int count = preparedStatement.executeUpdate(); if(count > 0)&#123; System.out.println(\"插入成功！\"); &#125;else&#123; System.out.println(\"插入失败！\"); &#125; &#125;catch (Exception e)&#123; e.printStackTrace(); &#125;finally &#123; DBUtil.closeConn(connection); if(null != preparedStatement)&#123; try&#123; preparedStatement.close(); &#125;catch (SQLException e)&#123; e.printStackTrace(); &#125; &#125; &#125; &#125; // 读取数据库中的图片 public static void readDB2Image()&#123; String targetPath = \"C:/Users/Administrator/Desktop/svg/2.png\"; Connection connection = null; PreparedStatement preparedStatement = null; ResultSet resultSet = null; try &#123; connection = DBUtil.getConn(); String sql = \"SELECT * FROM img_table WHERE id = ?\"; preparedStatement = connection.prepareStatement(sql); preparedStatement.setInt(1, 1); resultSet = preparedStatement.executeQuery(); while (resultSet.next())&#123; InputStream in = resultSet.getBinaryStream(\"photo\"); ImageUtil.readBin2Image(in, targetPath); &#125; &#125;catch (Exception e)&#123; e.printStackTrace(); &#125;finally &#123; DBUtil.closeConn(connection); if(resultSet != null)&#123; try &#123; resultSet.close(); &#125;catch (SQLException e)&#123; e.printStackTrace(); &#125; &#125; if(preparedStatement != null)&#123; try &#123; preparedStatement.close(); &#125;catch (SQLException e)&#123; e.printStackTrace(); &#125; &#125; &#125; &#125; public static void main(String[] args)&#123; // 插入图片 // readImage2DB(); // 取出图片 readDB2Image(); &#125; &#125; 5、实现效果 插入数据库的信息 取到的图片","categories":[{"name":"Mysql","slug":"Mysql","permalink":"http://example.com/categories/Mysql/"}],"tags":[{"name":"Mysql","slug":"Mysql","permalink":"http://example.com/tags/Mysql/"}]},{"title":"Hexo添加鼠标点击特效","slug":"Hexo添加鼠标点击特效","date":"2022-04-13T13:11:37.000Z","updated":"2022-04-25T07:42:43.479Z","comments":true,"path":"2022/04/13/Hexo添加鼠标点击特效/","link":"","permalink":"http://example.com/2022/04/13/Hexo%E6%B7%BB%E5%8A%A0%E9%BC%A0%E6%A0%87%E7%82%B9%E5%87%BB%E7%89%B9%E6%95%88/","excerpt":"","text":"博客页面点击弹出爱心特效，操作方式本文以Next主题模板为例，在主题文件夹下的source文件夹下是否存在js文件夹，不存在需创建。在js文件夹内创建爱心特效的后缀为click-live.js的文件，粘贴js代码如下： ! function (e, t, a) &#123; function n() &#123; c(\".heart&#123;width: 10px;height: 10px;position: fixed;background: #f00;transform: rotate(45deg);-webkit-transform: rotate(45deg);-moz-transform: rotate(45deg);&#125;.heart:after,.heart:before&#123;content: '';width: inherit;height: inherit;background: inherit;border-radius: 50%;-webkit-border-radius: 50%;-moz-border-radius: 50%;position: fixed;&#125;.heart:after&#123;top: -5px;&#125;.heart:before&#123;left: -5px;&#125;\"), o(), r() &#125; function r() &#123; for (var e = 0; e &lt; d.length; e++) d[e].alpha &lt;= 0 ? (t.body.removeChild(d[e].el), d.splice(e, 1)) : (d[e].y--, d[e].scale += .004, d[e].alpha -= .013, d[e].el.style.cssText = \"left:\" + d[e].x + \"px;top:\" + d[e].y + \"px;opacity:\" + d[e].alpha + \";transform:scale(\" + d[e].scale + \",\" + d[e].scale + \") rotate(45deg);background:\" + d[e].color + \";z-index:99999\"); requestAnimationFrame(r) &#125; function o() &#123; var t = \"function\" == typeof e.onclick &amp;&amp; e.onclick; e.onclick = function (e) &#123; t &amp;&amp; t(), i(e) &#125; &#125; function i(e) &#123; var a = t.createElement(\"div\"); a.className = \"heart\", d.push(&#123; el: a, x: e.clientX - 5, y: e.clientY - 5, scale: 1, alpha: 1, color: s() &#125;), t.body.appendChild(a) &#125; function c(e) &#123; var a = t.createElement(\"style\"); a.type = \"text/css\"; try &#123; a.appendChild(t.createTextNode(e)) &#125; catch (t) &#123; a.styleSheet.cssText = e &#125; t.getElementsByTagName(\"head\")[0].appendChild(a) &#125; function s() &#123; return \"rgb(\" + ~~(255 * Math.random()) + \",\" + ~~(255 * Math.random()) + \",\" + ~~(255 * Math.random()) + \")\" &#125; var d = []; e.requestAnimationFrame = function () &#123; return e.requestAnimationFrame || e.webkitRequestAnimationFrame || e.mozRequestAnimationFrame || e.oRequestAnimationFrame || e.msRequestAnimationFrame || function (e) &#123; setTimeout(e, 1e3 / 60) &#125; &#125;(), n() &#125;(window, document); 保存后在主题模板的layout文件夹的_partial找到footer.swig并打开引入： &lt;script type=\"text/javascript\" src=\"/js/click-live.js\" /> 保存即可。 控制台执行： hexo clean hexo g hexo s 重新打开localhost:4000即可。 实现效果：","categories":[{"name":"next主题自定义","slug":"next主题自定义","permalink":"http://example.com/categories/next%E4%B8%BB%E9%A2%98%E8%87%AA%E5%AE%9A%E4%B9%89/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://example.com/tags/hexo/"}]},{"title":"Mysql生成数据字典","slug":"Mysql生成数据字典","date":"2022-04-13T12:30:20.000Z","updated":"2022-04-16T01:49:02.773Z","comments":true,"path":"2022/04/13/Mysql生成数据字典/","link":"","permalink":"http://example.com/2022/04/13/Mysql%E7%94%9F%E6%88%90%E6%95%B0%E6%8D%AE%E5%AD%97%E5%85%B8/","excerpt":"","text":"查询原理：在MySQL中，有个自带的数据库，名为information_schema。其中保存着关于MySQL服务器所维护的所有其他数据库的信息。如数据库名，数据库的表，表栏的数据类型与访问权 限等。我们通过查询这个数据库的COLUMNS表（此表提供了其他所有表中的列信息）信息，来获取我们需要的表结构信息，从而将其导出为数据字典。 实现案例：navicat 执行以下SQL的查询（如果需要其他字段，请参考下面COLUMNS表字段拓展）： SELECT COLUMN_NAME AS &#39;字段名&#39;, COLUMN_TYPE AS &#39;字段类型&#39;, ( CASE WHEN IS_NULLABLE &#x3D; &#39;YES&#39; THEN &#39;是&#39; ELSE &#39;否&#39; END ) AS &#39;是否可空&#39;, ( CASE WHEN COLUMN_KEY &#x3D; &#39;PRI&#39; THEN &#39;是&#39; ELSE &#39;否&#39; END ) AS &#39;是否主键&#39;, COLUMN_DEFAULT AS &#39;默认值&#39;, COLUMN_COMMENT AS &#39;注释&#39; FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA &#x3D; &#39;数据库&#39; AND TABLE_NAME &#x3D; &#39;表&#39;; 通过navicat工具进行导出(如下图的按钮，之后自行选择要导出的内容)； COLUMNS表字段拓展： 列名 描述 COLUMN_NAME 字段名 COLUMN_TYPE 字段类型 TABLE_CATALOG 表限定符。 IS_NULLABLE 列的为空性。如果列允许 NULL，那么该列返回 YES。否则，返回 NO。 COLUMN_KEY 字段主键 COLUMN_DEFAULT 默认值 COLUMN_COMMENT 注释 ORDINAL_POSITION 字段在表的顺序（从1开始） TABLE_NAME 数据表名 TABLE_SCHEMA 数据库名 DATA_TYPE 数据类型 DATETIME_PRECISION datetime 及 SQL-92 interval 数据类型的子类型代码。对于其它数据类型，返回 NULL。 EXTRA 额外信息 GENERATION_EXPRESSION NUMERIC_PRECISION 近似数字数据、精确数字数据、整型数据或货币数据的精度。否则，返回 NULL。 NUMERIC_SCALE 近似数字数据、精确数字数据、整数数据或货币数据的小数位数。否则，返回 NULL。 PRIVILEGES CHARACTER_MAXIMUM_LENGTH 以字符为单位的最大长度，适于二进制数据、字符数据，或者文本和图像数据。否则，返回NULL。 CHARACTER_OCTET_LENGTH 以字节为单位的最大长度，适于二进制数据、字符数据，或者文本和图像数据。否则，返回 NULL。 CHARACTER_SET_NAME 如果该列是字符数据或 text数据类型，那么为字符集返回唯一的名称。否则，返回 NULL。 COLLATION_NAME 排序规则，如果列是字符数据或 text数据类型，那么为排序次序返回唯一的名称。否则，返回 NULL。","categories":[{"name":"Mysql","slug":"Mysql","permalink":"http://example.com/categories/Mysql/"}],"tags":[{"name":"Mysql","slug":"Mysql","permalink":"http://example.com/tags/Mysql/"},{"name":"数据字典","slug":"数据字典","permalink":"http://example.com/tags/%E6%95%B0%E6%8D%AE%E5%AD%97%E5%85%B8/"}]},{"title":"六级真题翻译","slug":"六级真题翻译","date":"2021-12-06T04:22:22.000Z","updated":"2021-12-13T09:08:01.733Z","comments":true,"path":"2021/12/06/六级真题翻译/","link":"","permalink":"http://example.com/2021/12/06/%E5%85%AD%E7%BA%A7%E7%9C%9F%E9%A2%98%E7%BF%BB%E8%AF%91/","excerpt":"","text":"2018年12月（1） 原文 ​ 近年来，中国越来越多的博物馆免费向公众开放。博物管展览次数和参观人数都明显增加。在一些广受欢迎的博物馆门前，排长队已很常见。这些博物馆必须采取措施限制参观人数。如今，展览形式越来越多样。一些大型博物馆利用多媒体和虚拟现实等先进技术，使展览更具吸引力。不少博物馆还举办在线展览，人们可在网络上关上珍惜展品。然而，现场观看展品的体验对大多数参观者还是更具吸引力。 译文 ​ In recent years, a growing number of museums in China have been open to the public, free of charge. Both the number of museum exhibitions and the number of museum visitors have increased sig-nificantly. It is quite common to see long queues in front of some popular museums. These mu-seums have to take measures to limit the number of visitors. Nowdays, museum exhibitions come in an increasing variety of forms. Some large museums use advanced technologies like multimedia and virtual reality to make the exhibitions more attractive. Quite a few museums also hold online exhibitions, making rare exhibits available online for public viewing. However, the experience of viewing physical exhibits in persion is still more attractive to most visitors. 2018年12月（2） 原文 中国越来越重视公共图书馆，并鼓励人们充分加以利用。新近公布的统计数字表明，中国的公共图书馆的数量在逐年增多。许多图书馆通过翻新和扩建，为读者创建了更安静和更舒适的环境。大型公共图书馆不仅提供种类繁多的参考资料，而且还会定期举办讲座、展览等活动。近年来，出现了很多数字图书馆，从而节省了存放图书所需的空间。一些图书馆还推出了自助服务系统，使读者借书还书更加方便，进一步满足了读者的需求。 译文 ​ China is attaching increasing importance to public libraries and encouraging people to make full use of them. Newly released statistics show that the number of public libraries in China is growing year by year. Many libraries have created a quieter and more comfortable environment for readers through renovation and expansion. Large public libraries not only provide a wide variety of reference resources, but also hold regular lectures, exhibitions and other activities In recent years, many digital libraries have also been created, thus saving the space needed to store books. Some libraries have also introduced self-service systems, which make it more convenient for readers to borrow and return books, further satisfying the need of readers. 2018年12月（3） 原文 近年来，中国政府进一步加大体育馆建设投资，以更好的满足人们快速增长的健身需求。除了新建的体育馆外，很多城市还采取了改造旧工厂和商业建筑等措施，来增加当地体育馆的数量。在政府资金的支持下，越来越多的体育馆向公众免费开放或者只收取少量费用。许多体育馆通过应用现代信息技术大大提高了服务质量。人们可以方便地在线预订场地和付费。可以预见，随着运动设施的不断完善，愈来愈多的人将会去体育馆健身。 译文 In recent years, the Chinese government has further increased investment in the construction of gyms to better meet people’s rapidly growing fitness needs. In addition to building new gyms, many cities have taken measures such as transforming old factories and commerical buildings to increase the number of local gyms. With the support of government funds, an increasing number of gyms are open to the public, free of charge, or for only a small fee. Many gyms have greatly improved their service through the application of modern information technology, allowing people to easily book courts and pay for them online. It is foreseeable that as sports facilities continue to improve, a growing number of people will go to the gym to get fit. 2019年6月（1） 原文 成语是汉语中的一种独特的表达方式，大多数由四个汉字组成。它们高度简练且形式固定，但通常能形象的表达深刻的含义。成语大多来源于中国古代的文学作品，通常与某些神话、传说或者历史事件有关。如果不知道某个成语的出处，就很难理解其含义。因此，学习成语有助于人们更好地理解中国传统文化。成语在日常会话和文学创作中广泛使用。恰当使用成语可以使一个人的语言更具表现力，交流更有效。 译文 ​ Chinese idioms are a unique type of Chinese expression, most of which consist of four cha-racters. Though highly compact and structurally fixed, they usually can express profound meanings vivi-dly. Chinese idioms are mostly derived from ancient literature, and often linked with certain myths, stor-ies or historical facts. The precies meaning of an idiom can be difficult to understand without the knowl-edge of its origin. Therefore, learning Chinese idioms helps people better understand traditional Chinese culture. Chinese idioms are widely used in daily conversations and literary works. Proper use of Chinese idioms can make one&#39;s words more expressive and communication more effective. 2019年6月（2） 原文 中国幅员辽阔、人口众多。很多地方的人都说自己的方言。方言在发音上差别很大，词汇和语法差别较小。有些方言，特别是北方和南方的方言，差异很大，以至于说不同方言的人常常很难听懂彼此的讲话。方言被认为是当地文化的一部分，但是近年来，能说方言的人越来越少，为了鼓励人们多说方言，一些当地的政府已经采取措施，比如在学校开设方言课，在广播和电视上播放方言节目，以期保存本地的文化遗产。 译文 China has a vast territory and a large population. People in many places of China speak their own dialects. Chinese dialects differ most in pronunciation, and to a lesser extent in vocabulary and grammer. Some dialects, especially northen dialects and sourthen dialects, vary so much that they are often not mutually intelligible with each other. Dialects are considered an integral part of local cultures, but the number of people who can speak dialects has been decreasing in recent years. In order to encourage people to speak local dialects more often, some local government have taken measures such as offering dialect courses in schools and broadcasting dialect programs on radio and television in the hope of preserving local cultural heritage. 2019年6月（3） 原文 ​ 汉语现在是世界上用作本族语人数最多的语言。汉语和西方语言的一个重要区别就是它是由方块字而不是以字母构成的。目前仍在使用的书写系统中，汉语是最古老的。在中国，来自不同地区的人可能听不懂对方的方言，但是由于汉字有统一的书写形式，他们交流起来几乎没有任何困难。汉语历史上对团结中华民族发挥了重要的作用。今天，随着中国经济的快速增长和全球影响力的增强，越来越多的其他国家的人也开始学习汉语。 译文 ​ Chinese is now the language with the largest of native speakers in the world. One important way in which Chinese differs from Western language is that, instead of letters, it use characters. Chinese is the oldest script still in use. In China, people from different regions may find it diffcult to understand each other’s dialects, but they have little diffculty in communicating through written Chinese, because Chinese characters share common written form. Chinese has play an important role in uniting the Chinese nation in history. Today, with the rapid growth of China’s economy and the increase in its global influence, a rising number of people from other countries also start learning Chinese. 2019年12月（1）* 原文 牡丹，花色艳丽，形象高雅，象征着和平与繁荣，因而在中国被誉为花中之王。中国的许多地方都培育和种植牡丹。千百年来，创作了许多诗歌和绘画去赞美牡丹。唐代时期，牡丹在皇家园林普遍种植并被誉为国花，因而特别风行。十世纪时，洛阳古城成为牡丹栽培中心，而且这一地位一直保持到今天。现在，成千上万的国内外游客蜂拥到洛阳参加一年一度的牡丹节，欣赏洛阳牡丹的独特之美，同时探索九朝古都的历史。 译文 The peony, with bright colors and an elegant appearance, is a symbol of peace and prosperity and thus recognized as “king of the flowers” in China. Peonies are bred and growth in many parts of the country. Over the centuries, numerous poems and paintings have been created to praise the flower. Peonies were particularly popular during the Tang Dynasty, when they were extensively cultivated in the imperial gardens and praised as the national flower. In the tenth century, the ancient of Luoyang became the center for peony cultivation, a position it still holds today. Nowdays, the thousands of tourists from home and abroad flock to Luoyang for annual Peony Festival to both admire the unique beauty of the city’s peonies and explore the history of the ancient capital of nine dynasties.","categories":[{"name":"六级","slug":"六级","permalink":"http://example.com/categories/%E5%85%AD%E7%BA%A7/"}],"tags":[{"name":"翻译","slug":"翻译","permalink":"http://example.com/tags/%E7%BF%BB%E8%AF%91/"},{"name":"六级","slug":"六级","permalink":"http://example.com/tags/%E5%85%AD%E7%BA%A7/"}]},{"title":"Goland配置GOROOT无法识别已安装的go","slug":"Goland配置GOROOT无法识别已安装的go","date":"2021-11-17T10:03:13.000Z","updated":"2021-11-17T10:09:14.013Z","comments":true,"path":"2021/11/17/Goland配置GOROOT无法识别已安装的go/","link":"","permalink":"http://example.com/2021/11/17/Goland%E9%85%8D%E7%BD%AEGOROOT%E6%97%A0%E6%B3%95%E8%AF%86%E5%88%AB%E5%B7%B2%E5%AE%89%E8%A3%85%E7%9A%84go/","excerpt":"","text":"1、本次安装goland：2019.2.3 go：1.17.3 本次安装的已经安装好go并配置好GOROOT和GOPATH之后，在Goland无法自动识别出GOROOT。在Goland设置选择go安装目录下，提示以下信息： The selected directory is not a valid home for Go SDK 2、解决因为Goland版本和go版本不对应，需要将go版本降低到1.15.15。调整之后，Goland会自动识别出本地安装的GOROOT的路径。","categories":[{"name":"Go","slug":"Go","permalink":"http://example.com/categories/Go/"}],"tags":[{"name":"GoLand","slug":"GoLand","permalink":"http://example.com/tags/GoLand/"}]},{"title":"大数据练习三","slug":"大数据练习三","date":"2021-11-01T14:09:07.000Z","updated":"2021-11-01T14:10:39.397Z","comments":true,"path":"2021/11/01/大数据练习三/","link":"","permalink":"http://example.com/2021/11/01/%E5%A4%A7%E6%95%B0%E6%8D%AE%E7%BB%83%E4%B9%A0%E4%B8%89/","excerpt":"","text":"12.4 本地数据集上传到数据仓库Hive 实验数据集下载 首先新建一个用于运行本案例的目录bigdatacase # 新建目录bigdatacase hadoop@maomao-virtual-machine:/usr/local$ sudo mkdir bigdatacase [sudo] password for hadoop: hadoop@maomao-virtual-machine:/usr/local$ ls bigdatacase games hive lib sbin spark bin hadoop idea man scala src etc hbase include mysql-connector-java-8.0.27 share 下面给bigdatacase赋予权限 $ sudo chown -R hadoop:hadoop ./bigdatacase 切换到bigdatacase目录，然后新建一个dataset $ cd bigdatacase $ mkdir dataset 把数据保存到dataset中 $ cp huochengyan_data.csv /usr/local/bigdatacase/dataset $ cd /usr/local/bigdatacase/dataset $ ls huochengyan_data.csv 数据集预处理 1、删除文件第一行记录（即字段名称） $ sed -i '1d' huochengyan_data.csv sed -i '1d' raw_user.csv $ ls huochengyan_data.csv raw_user.csv small_user.csv $ head -5 raw_user.csv 10001082,285259775,1,97lk14c,4076,2014-12-08 18 10001082,4368907,1,,5503,2014-12-12 12 10001082,4368907,1,,5503,2014-12-12 12 10001082,53616768,1,,9762,2014-12-02 15 10001082,151466952,1,,5232,2014-12-12 11 2、对字段进行预处理 使用vim新建一个pre_deal.sh vim pre_deal.sh #下面设置输出文件，把用户执行pre_deal.sh命令时提供的第二个参数作为输出文件名称 outfile=$2 #注意，最后的$infile> $outfile必须跟在&#125;’这两个字符的后面 awk -F \",\" 'BEGIN&#123; srand(); id=0; Province[0]=\"山东\";Province[1]=\"山西\";Province[2]=\"河南\";Province[3]=\"河北\";Province[4]=\"陕西\";Province[5]=\"内蒙古\";Province[6]=\"上海市\"; Province[7]=\"北京市\";Province[8]=\"重庆市\";Province[9]=\"天津市\";Province[10]=\"福建\";Province[11]=\"广东\";Province[12]=\"广西\";Province[13]=\"云南\"; Province[14]=\"浙江\";Province[15]=\"贵州\";Province[16]=\"新疆\";Province[17]=\"西藏\";Province[18]=\"江西\";Province[19]=\"湖南\";Province[20]=\"湖北\"; Province[21]=\"黑龙江\";Province[22]=\"吉林\";Province[23]=\"辽宁\"; Province[24]=\"江苏\";Province[25]=\"甘肃\";Province[26]=\"青海\";Province[27]=\"四川\"; Province[28]=\"安徽\"; Province[29]=\"宁夏\";Province[30]=\"海南\";Province[31]=\"香港\";Province[32]=\"澳门\";Province[33]=\"台湾\"; &#125; &#123; id=id+1; value=int(rand()*34); print id\"\\t\"$1\"\\t\"$2\"\\t\"$3\"\\t\"$5\"\\t\"substr($6,1,10)\"\\t\"Province[value] &#125;' $infile> $outfile 执行pre_deal.sh对数据进行预处理 $ bash ./pre_deal.sh small_user.csv user_table.txt 导入数据库 1、启动HDFS 2、把user_table.txt上传到HDFS中 在HDFS中新建一个bigdatacase/dataset文件 $ ./bin/hdfs dfs -mkdir -p /bigdatacase/dataset 然后把linux本地文件系统中的user_table.txt上传到HDFS的bigdatacase/dataset中 $ ./bin/hdfs dfs -put /usr/local/bigdatacase/dataset/user_table.txt /bigdatacase/dataset 现在可以去查看HDFS中的user_table.txt 在Hive上创建数据库 创建数据库 create database dblab; 创建外部表 CREATE EXTERNAL TABLE dblab.bigdata_users(id INT,uid STRING,item_id STRING,behavior_type INT,item_category STRING,visit_date DATE,province STRING) COMMENT &#39;welcome to xmudblab!&#39; ROW FORMAT DELIMITED FIELDS TERMINATED BY &#39;\\t&#39; STORED AS TEXTFILE LOCATION &#39;&#x2F;bigdatacase&#x2F;dataset&#39;; 查询数据 show tables; OK bigdata_user Time taken: 0.158 seconds, Fetched: 1 row(s) # 查询bigdata_user表的各种属性 hive> show create table bigdata_user; OK CREATE EXTERNAL TABLE `bigdata_user`( `id` int, `uid` string, `item_id` string, `behavior_type` int, `item_category` string, `visit_date` date, `province` string) COMMENT 'welcome to xmudblab!' ROW FORMAT SERDE 'org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe' WITH SERDEPROPERTIES ( 'field.delim'='\\t', 'serialization.format'='\\t') STORED AS INPUTFORMAT 'org.apache.hadoop.mapred.TextInputFormat' OUTPUTFORMAT 'org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat' LOCATION 'hdfs://192.168.222.129:9000/bigdatacase/dataset' TBLPROPERTIES ( 'bucketing_version'='2', 'transient_lastDdlTime'='1635318615') Time taken: 0.898 seconds, Fetched: 23 row(s) 还可以通过以下命令查看表的简单结构 desc bigdata_user; 还可以执行下面命令查看表的简单结构 SELECT * FROM bigdata_user limit 10; 12.5 Hive数据分析 简单查询分析 首先执行一条简单的指令：查看前10位用户对商品的行为 select behavior_type from bigdata_user limit 10; 查询前20位用户购买商品时的时间和商品的种类 查询条数统计分析 1、用聚合函数count()计算出表内有多少行数据： select count(*) from bigdata_user; 包含了30000条数据 2、在函数内部加上distinct，查出uid不重复的数据有多少条 select count(distinct uid) from bigdata_user; 270 3、查询不重复的数据有多少条（为了排除客户刷单情况） SELECT COUNT(*) FROM (SELECT item_id FROM bigdata_user GROUP BY item_id)a; 关键字条件查询分析 1、以关键字的存在区间为条件的查询 （1）查询2014年12-10到2014年12-13有多少人浏览了商品 select count(*) from bigdata_user where behavior_type&#x3D;&#39;1&#39; and visit_date&lt;&#39;2014-12-13&#39; and visit_date&gt;&#39;2014-12-10&#39;; （2）以月的第n天为统计单位，依次显示第n天网站卖出去的商品的个数 select count(distinct uid),day(visit_date) from bigdata_user where behavior_type&#x3D;&#39;4&#39; group by day(visit_date); OK 37 1 48 2 42 3 38 4 42 5 33 6 42 7 36 8 34 9 40 10 43 11 98 12 39 13 43 14 42 15 44 16 42 17 66 18 38 19 50 20 33 21 34 22 32 23 47 24 34 25 31 26 30 27 34 28 39 29 38 30 Time taken: 7.798 seconds, Fetched: 30 row(s) 2、关键字赋予定值为条件，对其他数据进行分析 取给定时间和给定地点，求当天发出到该地点的货物的数量。 select count(*) from bigdata_user where province&#x3D;&#39;江西&#39; and visit_date&#x3D;&#39;2014-12-12&#39; and behavior_type&#x3D;&#39;4&#39;; 根据用户行为分析 1、查询一件商品在某天的购买比例或浏览比例 # 查询多少用户在2014-12-11购买了商品 SELECT COUNT(*) FROM bigdata_user WHERE visit_date &#x3D; &#39;2014-12-11&#39; and behavior_type &#x3D; &#39;4&#39;; # 查询有多少用户在2014-12-11点击了该店 SELECT COUNT(*) FROM bigdata_user WHERE visit_date &#x3D; &#39;2014-12-11&#39;; 2、查询某个用户在某一天点击网站占该天所有点击行为的比例（包括浏览、加入购物车、收藏、购买） # 查询用户10001082在2014-12-12点击网站的次数 SELECT COUNT(*) FROM bigdata_user where uid&#x3D;10001082 and visit_date&#x3D;&#39;2014-12-12&#39;; # 查询所有用户在这一天点击该网站的次数 SELECT COUNT(*) FROM bigdata_user WHERE visit_date&#x3D;&#39;2014-12-12&#39;; 3、给定购买商品的数量范围，查询某一天在该网站的购买该数量商品的用户id # 查询某一天在该网站购买商品超过5次的用户id SELECT uid FROM bigdata_user WHERE behavior_type&#x3D;&#39;4&#39; and visit_date&#x3D;&#39;2014-12-12&#39; GROUP BY uid having count(behavior_type&#x3D;&#39;4&#39;)&gt;5; 用户实时查询分析 查询某个地区的用户当天浏览网站的次数，语句如下： 创建新的数据表进行存储： create table scan(province STRING,scan INT) COMMENT &#39;This is the search of bigdataday&#39; ROW FORMAT DELIMITED FIELDS TERMINATED BY &#39;\\t&#39; STORED AS TEXTFILE; 导入数据： insert overwrite table scan select province,count(behavior_type) from bigdata_user where behavior_type&#x3D;&#39;1&#39; group by province; 显示结果： hive&gt; select * from scan; OK 上海市 8180 云南 8353 内蒙古 8395 北京市 8275 台湾 8242 吉林 8253 四川 8316 天津市 8423 宁夏 8548 安徽 8331 山东 8330 山西 8195 广东 8455 广西 8249 新疆 8467 江苏 8416 江西 8414 河北 8297 河南 8386 浙江 8407 海南 8367 湖北 8263 湖南 8256 澳门 8350 甘肃 8218 福建 8320 西藏 8366 贵州 8381 辽宁 8307 重庆市 8487 陕西 8299 青海 8237 香港 8366 黑龙江 8367 Time taken: 0.142 seconds, Fetched: 34 row(s)","categories":[{"name":"大数据","slug":"大数据","permalink":"http://example.com/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"}],"tags":[{"name":"练习3","slug":"练习3","permalink":"http://example.com/tags/%E7%BB%83%E4%B9%A03/"}]},{"title":"大数据练习1","slug":"大数据练习1","date":"2021-10-25T11:58:14.000Z","updated":"2021-10-25T11:59:03.259Z","comments":true,"path":"2021/10/25/大数据练习1/","link":"","permalink":"http://example.com/2021/10/25/%E5%A4%A7%E6%95%B0%E6%8D%AE%E7%BB%83%E4%B9%A01/","excerpt":"","text":"练习一一、使用Spark创建WordCount01 创建测试文件 创建WordCount的数据目录，并且切换到WordCount的数据目录 # 创建WordCount的数据目录 $ mkdir -p ~/workspace/WordCount/data # 切换到data目录 $ cd ~/workspace/WordCount/data 编辑test.txt $ gedit test.txt 输入内容保存即可 02 进入Spark-shell 进入到Spark-shell cd /usr/local/spark ./bin/spark-shell 03 执行WordCount Spark命令 04 查看data目录 使用ll查看data目录，可以看到data中有output目录 ls 查看output目录 cd output ll 查看part-00000输出文件 cat part-00000 可以查看输出目录output中的文件 05 设置结果输出为一个文件countsRDD.repartition(1).saveAsTextFile(\"file:/home/hadoop/workspace/WordCount/data/output2\") 输出结果为一个文件","categories":[{"name":"大数据","slug":"大数据","permalink":"http://example.com/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"}],"tags":[{"name":"练习1","slug":"练习1","permalink":"http://example.com/tags/%E7%BB%83%E4%B9%A01/"}]},{"title":"大数据练习2-实例13","slug":"大数据练习2-实例13","date":"2021-10-25T11:56:42.000Z","updated":"2021-10-25T13:46:39.770Z","comments":true,"path":"2021/10/25/大数据练习2-实例13/","link":"","permalink":"http://example.com/2021/10/25/%E5%A4%A7%E6%95%B0%E6%8D%AE%E7%BB%83%E4%B9%A02-%E5%AE%9E%E4%BE%8B13/","excerpt":"","text":"实例13 打包程序并提交至集群运行1、打包程序 File–&gt;Project Structure… 依次点击 1 2 3 点击右面的…，在弹出的框中搜索p…点击选中搜索到的class即可，最后ok 删除jar，只留一下一个，点击OK即可 Build –&gt; Build Artifacts 在弹出框内点击Build即可 2、提交至集群运行 输入以下代码提交至集群运行 ./bin/spark-submit --class \"practise3.practise1\" /home/hadoop/IdeaProjects/SparkSyllabusBook/out/artifacts/practise3_jar/practise3.jar 查看运行结果 $ ./bin/hdfs dfs -cat /shili14/part-00000 (the,18) (of,9) (in,8) (ramp,6) (Triassic,5) (and,5) (Mecsek,4) (facies,3) (are,3) (Middle,3) (a,3) (The,2) (which,2) (study,2) (representing,2) (Tisza,2) (an,2) (Torok,2) (during,2) (Mountains,2) (Megaunit,2) (Lower,1) ((half),1) (transgression,1) (this,1) (material),1) ((Vindelician,1) (Sandstone,1) (Massif,1) (isolated,1) (evolution,1) (Villány,1) (region,1) (Rókahegy,1) (A,1) (thirteen,1) (lgyi,1) (intensifying,1) (This,1) (who,1) (resulting,1) (margin,1) (carbonate,1) (Tectonic,1) (rapidly,1) (lows,1) (Zuhánya,1) (part,1) (given,1) (High),1) (then,1) (started,1) (area,1) (by,1) (Palaeotethyan,1) (occupied,1) (Limestone,1) (siliciclas-,1) (Formation,1) ((1998),1) (sedimentation,1) (early,1) (initial,1) ((1998).,1) (tectonism,1) (recognised,1) (high,1) (slope,1) (outer-,1) (marks,1) (mixed,1) (whole,1) (units,1) (underwater,1) (Dolomite,1) (later,1) (with,1) (Anisian,1) (development,1) (graben,1) (subsiding,1) (while,1) (dissection,1) (neighboured,1) (nearby,1) (Bohemian,1) (Hills,1) (seventeen,1) (Karolinav,1) (descriptions,1) (Hungary,1) (shelf,1) (continuation,1) (Detailed,1) (succession,1) ((Supplementary,1) (theflooding,1) (to,1) (southern,1) (tic,1) (mid-ramp,1) (Permianfluvial,1) (northern,1) (Synsedimentary,1) (were,1) (Upper,1) (fol-,1) (inner,1) (being,1) (observed,1) (led,1) (steepening,1)","categories":[{"name":"大数据","slug":"大数据","permalink":"http://example.com/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"}],"tags":[{"name":"练习2","slug":"练习2","permalink":"http://example.com/tags/%E7%BB%83%E4%B9%A02/"}]},{"title":"大数据练习2-实例11","slug":"大数据练习2-实例11","date":"2021-10-25T11:55:44.000Z","updated":"2021-10-25T13:45:39.974Z","comments":true,"path":"2021/10/25/大数据练习2-实例11/","link":"","permalink":"http://example.com/2021/10/25/%E5%A4%A7%E6%95%B0%E6%8D%AE%E7%BB%83%E4%B9%A02-%E5%AE%9E%E4%BE%8B11/","excerpt":"","text":"实例11 在IDEA中本地运行WordCount程序1、在Windows系统中配置Hadoop环境（1）下载Hadoop的Windows包（2）配置环境变量新建环境变量HADOOP_HOME 添加到Path中 2、将程序运行改为本地模式def main(args: Array[String]) : Unit = &#123; val conf = new SparkConf() .setMaster(\"local[*]\") .setAppName(\"WC\") val sc = new SparkContext(conf) sc.textFile(\"hdfs://192.168.222.128:9000/user/hadoop/word2.txt\") .flatMap(_.split(\" \")) .map((_, 1)) .reduceByKey(_ + _, 1) .sortBy(_._2, false) .saveAsTextFile(\"hdfs://192.168.222.128:9000/output4\") sc.stop() &#125; 3、运行测试 查看最后的输出结果，part-00000文件 [hadoop@iZbp11gznj7n38xkztu64dZ hadoop]$ ./bin/hdfs dfs -cat /output4/part-00000 (the,18) (of,9) (in,8) (ramp,6) (Triassic,5) (and,5) (Mecsek,4) (facies,3) (are,3) (Middle,3) (a,3) (The,2) (which,2) (study,2) (representing,2) (Tisza,2) (an,2) (Torok,2) (during,2) (Mountains,2) (Megaunit,2) (Lower,1) ((half),1) (transgression,1) (this,1) (material),1) ((Vindelician,1) (Sandstone,1) (Massif,1) (isolated,1) (evolution,1) (Villány,1) (region,1) (Rókahegy,1) (A,1) (thirteen,1) (lgyi,1) (intensifying,1) (This,1) (who,1) (resulting,1) (margin,1) (carbonate,1) (Tectonic,1) (rapidly,1) (lows,1) (Zuhánya,1) (part,1) (given,1) (High),1) (then,1) (started,1) (area,1) (by,1) (Palaeotethyan,1) (occupied,1) (Limestone,1) (siliciclas-,1) (Formation,1) ((1998),1) (sedimentation,1) (early,1) (initial,1) ((1998).,1) (tectonism,1) (recognised,1) (high,1) (slope,1) (outer-,1) (marks,1) (mixed,1) (whole,1) (units,1) (underwater,1) (Dolomite,1) (later,1) (with,1) (Anisian,1) (development,1) (graben,1) (subsiding,1) (while,1) (dissection,1) (neighboured,1) (nearby,1) (Bohemian,1) (Hills,1) (seventeen,1) (Karolinav,1) (descriptions,1) (Hungary,1) (shelf,1) (continuation,1) (Detailed,1) (succession,1) ((Supplementary,1) (theflooding,1) (to,1) (southern,1) (tic,1) (mid-ramp,1) (Permianfluvial,1) (northern,1) (Synsedimentary,1) (were,1) (Upper,1) (fol-,1) (inner,1) (being,1) (observed,1) (led,1) (steepening,1)","categories":[{"name":"大数据","slug":"大数据","permalink":"http://example.com/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"}],"tags":[{"name":"练习2","slug":"练习2","permalink":"http://example.com/tags/%E7%BB%83%E4%B9%A02/"}]},{"title":"大数据练习2-实例10","slug":"大数据练习2-实例10","date":"2021-10-25T11:53:58.000Z","updated":"2021-10-25T13:45:02.467Z","comments":true,"path":"2021/10/25/大数据练习2-实例10/","link":"","permalink":"http://example.com/2021/10/25/%E5%A4%A7%E6%95%B0%E6%8D%AE%E7%BB%83%E4%B9%A02-%E5%AE%9E%E4%BE%8B10/","excerpt":"","text":"实例10 使用IDEA编写WordCount程序1、新建Scala Object 在practise3包鼠标右键，选择New-&gt;Scala Class命令，用于新建Scala文件 在弹出的对话框中，选择Kind为Object 在刚刚新建的文件中添加代码 def main(args: Array[String]) : Unit = &#123; val conf = new SparkConf() .setMaster(\"spark:192.168.222.128:9000\") .setAppName(\"WC\") val sc = new SparkContext(conf) sc.textFile(\"hdfs://192.168.222.128:9000/user/hadoop/word2.txt\") .flatMap(_.split(\" \")) .map((_, 1)) .reduceByKey(_ + _, 1) .sortBy(_._2, false) .saveAsTextFile(\"hdfs://192.168.222.128:9000/output\") sc.stop() &#125; 运行代码，去HDFS中查找output文件","categories":[{"name":"大数据","slug":"大数据","permalink":"http://example.com/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"}],"tags":[{"name":"练习2","slug":"练习2","permalink":"http://example.com/tags/%E7%BB%83%E4%B9%A02/"}]},{"title":"大数据练习2-实例9","slug":"大数据练习2-实例9","date":"2021-10-25T11:33:04.000Z","updated":"2021-10-25T12:13:13.735Z","comments":true,"path":"2021/10/25/大数据练习2-实例9/","link":"","permalink":"http://example.com/2021/10/25/%E5%A4%A7%E6%95%B0%E6%8D%AE%E7%BB%83%E4%B9%A02-%E5%AE%9E%E4%BE%8B9/","excerpt":"","text":"实例9 准备开发环境，并构建代码工程1、准备开发环境（1）安装Scala SDK （2）下载安装IDEA （3）在IDEA中配置Scala开发环境 2、构建工程（1）新建一个空的Java工程 选择新建java工程 输入工程名 （2）新建Maven工程 首先在刚才创建的Java工程上单机鼠标右键，选择New Module，然后在弹出对话框左侧选择Maven，单机Next 填写GroupId与ArtifactId，Next直到Finish即可 （3）配置pom.xml文件&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?> &lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"> &lt;modelVersion>4.0.0&lt;/modelVersion> &lt;groupId>com.fourgroup&lt;/groupId> &lt;artifactId>practise-3&lt;/artifactId> &lt;version>1.0-SNAPSHOT&lt;/version> &lt;repositories> &lt;repository> &lt;id>1&lt;/id> &lt;name>MAVEN-CENTER&lt;/name> &lt;url>http://centeral.maven.org/maven2/&lt;/url> &lt;/repository> &lt;/repositories> &lt;!----> &lt;dependencies> &lt;dependency> &lt;groupId>org.scala-lang&lt;/groupId> &lt;artifactId>scala-library&lt;/artifactId> &lt;version>2.11.8&lt;/version> &lt;/dependency> &lt;dependency> &lt;groupId>org.apache.spark&lt;/groupId> &lt;artifactId>spark-core_2.11&lt;/artifactId> &lt;version>2.1.0&lt;/version> &lt;exclusions> &lt;exclusion> &lt;groupId>org.apache.hadoop&lt;/groupId> &lt;artifactId>hadoop-client&lt;/artifactId> &lt;/exclusion> &lt;exclusion> &lt;groupId>org.scala-lang&lt;/groupId> &lt;artifactId>scala-library&lt;/artifactId> &lt;/exclusion> &lt;/exclusions> &lt;/dependency> &lt;!----> &lt;dependency> &lt;groupId>org.apache.hadoop&lt;/groupId> &lt;artifactId>hadoop-client&lt;/artifactId> &lt;version>2.2.0&lt;/version> &lt;/dependency> &lt;/dependencies> &lt;build> &lt;plugins> &lt;plugin> &lt;groupId>org.scala-tools&lt;/groupId> &lt;artifactId>maven-scala-plugin&lt;/artifactId> &lt;version>2.15.2&lt;/version> &lt;executions> &lt;execution> &lt;id>scala-compile-first&lt;/id> &lt;goals> &lt;goal>compile&lt;/goal> &lt;/goals> &lt;configuration> &lt;includes> &lt;include>**/*.scala&lt;/include> &lt;/includes> &lt;/configuration> &lt;/execution> &lt;execution> &lt;id>scala-test-compile&lt;/id> &lt;goals> &lt;goal>testCompile&lt;/goal> &lt;/goals> &lt;/execution> &lt;/executions> &lt;/plugin> &lt;/plugins> &lt;/build> &lt;/project> （4）构建Scala工程的目录结构 新建目录scala，并设置其为源文件目录 scala下新建包practise3","categories":[{"name":"大数据","slug":"大数据","permalink":"http://example.com/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"}],"tags":[{"name":"练习2","slug":"练习2","permalink":"http://example.com/tags/%E7%BB%83%E4%B9%A02/"}]},{"title":"Python大数据分析及基础实战笔记一","slug":"Python大数据分析及基础实战笔记一","date":"2021-09-15T05:22:42.000Z","updated":"2021-09-15T05:54:48.416Z","comments":true,"path":"2021/09/15/Python大数据分析及基础实战笔记一/","link":"","permalink":"http://example.com/2021/09/15/Python%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E5%8F%8A%E5%9F%BA%E7%A1%80%E5%AE%9E%E6%88%98%E7%AC%94%E8%AE%B0%E4%B8%80/","excerpt":"","text":"实现代码from PIL import Image pil_img = Image.open('baby.jpg') box = (150, 250, 400, 600) region = pil_img.crop(box) region = region.transpose(Image.ROTATE_90) pil_img.paste(region, box) pil_img.show() 错误修改 报错 D:\\SoftWare\\Python3.8.2\\python.exe F:/05.基于Python的大数据基础和实战/Python图像处理基础/PIL图库/003_复制和粘贴图像区域.py Traceback (most recent call last): File \"F:/05.基于Python的大数据基础和实战/Python图像处理基础/PIL图库/003_复制和粘贴图像区域.py\", line 11, in &lt;module> pil_img.paste(region, box) File \"D:\\SoftWare\\Python3.8.2\\lib\\site-packages\\PIL\\Image.py\", line 1496, in paste self.im.paste(im, box) ValueError: images do not match 错误原因 通常来说，这个报错是由于图片大小和参数中图片的宽度不匹配造成的。 修改 # 创建最长边为128像素的缩略图 pil_img.thumbnail((1500, 1500)) box = (550, 350, 1100, 900) 1100-550 = 550 900-350 = 550 550/1500 = 550/1500 ==注意：要保证和原始图片的比例一致才能匹配。== 运行结果","categories":[{"name":"Python大数据实战","slug":"Python大数据实战","permalink":"http://example.com/categories/Python%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%AE%9E%E6%88%98/"}],"tags":[{"name":"Python","slug":"Python","permalink":"http://example.com/tags/Python/"},{"name":"大数据","slug":"大数据","permalink":"http://example.com/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"}]},{"title":"查看chrome的版本","slug":"查看chrome的版本","date":"2021-09-15T02:48:59.000Z","updated":"2021-09-15T02:55:52.226Z","comments":true,"path":"2021/09/15/查看chrome的版本/","link":"","permalink":"http://example.com/2021/09/15/%E6%9F%A5%E7%9C%8Bchrome%E7%9A%84%E7%89%88%E6%9C%AC/","excerpt":"","text":"在浏览器中进行输入以下网址就可以查看了 chrome://version","categories":[{"name":"快捷指令","slug":"快捷指令","permalink":"http://example.com/categories/%E5%BF%AB%E6%8D%B7%E6%8C%87%E4%BB%A4/"}],"tags":[{"name":"快捷指令","slug":"快捷指令","permalink":"http://example.com/tags/%E5%BF%AB%E6%8D%B7%E6%8C%87%E4%BB%A4/"}]},{"title":"VueCesium错误日志2","slug":"VueCesium错误日志2","date":"2021-09-09T14:16:52.000Z","updated":"2021-09-09T12:05:28.234Z","comments":true,"path":"2021/09/09/VueCesium错误日志2/","link":"","permalink":"http://example.com/2021/09/09/VueCesium%E9%94%99%E8%AF%AF%E6%97%A5%E5%BF%972/","excerpt":"","text":"错误利用 vue init webpack vue_project 的时候出现一下错误 解决前往项目根目录删除node_modules文件夹，然后在项目根目录路径下的终端运行”npm install”等待安装完之后，再次运行“npm run dev”，有些人的是马上就可以了，然而往往还会有人（譬如我）仍然报类似的错误，这个时候你只需要再次重复相同的操作即可，“一次不成再删再安装”！！！","categories":[{"name":"VueCesium错误记录","slug":"VueCesium错误记录","permalink":"http://example.com/categories/VueCesium%E9%94%99%E8%AF%AF%E8%AE%B0%E5%BD%95/"}],"tags":[{"name":"VueCesium","slug":"VueCesium","permalink":"http://example.com/tags/VueCesium/"}]},{"title":"VueCesium开发笔记一","slug":"VueCesium开发笔记一","date":"2021-09-04T14:16:52.000Z","updated":"2021-09-08T02:37:27.617Z","comments":true,"path":"2021/09/04/VueCesium开发笔记一/","link":"","permalink":"http://example.com/2021/09/04/VueCesium%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0%E4%B8%80/","excerpt":"","text":"鹰眼 main.js文件中添加以下代码 import &#123;VcOverviewMap&#125; from \"vue-cesium\"; Vue.use(VcOverviewMap) 此外需要单独引入样式组件 import 'vue-cesium/lib/vc-map-overview.css'; vc-viewer中添加代码 &lt;vc-viewer :timeline&#x3D;&quot;timeline&quot; @ready&#x3D;&quot;ready&quot;&gt; &lt;vc-map-overview&gt;&lt;&#x2F;vc-map-overview&gt; &lt;vc-layer-imagery&gt; &lt;vc-provider-imagery-openstreetmap&gt;&lt;&#x2F;vc-provider-imagery-openstreetmap&gt; &lt;&#x2F;vc-layer-imagery&gt; &lt;&#x2F;vc-viewer&gt; 添加进度条&lt;vc-viewer&gt; &lt;!-- custom --&gt; &lt;vc-ajax-bar position&#x3D;&quot;bottom&quot; color&#x3D;&quot;#21BA45&quot; size&#x3D;&quot;5px&quot; positioning&#x3D;&quot;fixed&quot;&gt;&lt;&#x2F;vc-ajax-bar&gt; &lt;&#x2F;vc-viewer&gt; 添加一行代码即可搞定。","categories":[{"name":"VueCesium笔记","slug":"VueCesium笔记","permalink":"http://example.com/categories/VueCesium%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"VueCesium","slug":"VueCesium","permalink":"http://example.com/tags/VueCesium/"}]},{"title":"VueCesium错误日志","slug":"VueCesium错误日志","date":"2021-09-04T14:16:52.000Z","updated":"2021-09-24T05:24:54.540Z","comments":true,"path":"2021/09/04/VueCesium错误日志/","link":"","permalink":"http://example.com/2021/09/04/VueCesium%E9%94%99%E8%AF%AF%E6%97%A5%E5%BF%97/","excerpt":"","text":"错误1vue-router应用到组件中时报错： [Vue warn]: Unknown custom element: - did you register the component correctly? For recursive components, make sure to provide the “name” option. main.js import router from './router' new Vue(&#123; router: router, render: h => h(App), &#125;).$mount('#app') index.js const router = new VueRouter(&#123; mode: 'history', base: process.env.BASE_URL, routes: routes &#125;) export default router 错误2types.js:39 Uncaught TypeError: Cannot read property ‘prototype‘ of undefined 错误原因 因为使用的是vue3.0 cli- 不兼容element ui 解决方案 使用 elementui-plus 卸载之前的element-ui npm uninstall element-ui 安装element-plus npm install element-plus --save 错误3 利用Vuex-undo-redo插件的时候，出现报错，在vue3.x的版本中报错，vue2.x可以运行 Uncaught TypeError: Cannot read properties of undefined (reading 'find') at Object.install (plugin.js?e21a:5) at Object.use (runtime-core.esm-bundler.js?5c40:3405) at eval (store.js?c0d6:6) at Module../src/store.js (app.js:1149) at __webpack_require__ (app.js:849) at fn (app.js:151) at eval (main.js:12) at Module../src/main.js (app.js:1137) at __webpack_require__ (app.js:849) at fn (app.js:151) 暂时还未解决 错误4 ERROR Failed to compile with 1 error 下午1:21:59 error in ./src/components/MarkerViewer.vue?vue&amp;type=style&amp;index=0&amp;id=31c55d1c&amp;lang=scss&amp;scoped=true Syntax Error: TypeError: this.getOptions is not a function","categories":[{"name":"VueCesium错误记录","slug":"VueCesium错误记录","permalink":"http://example.com/categories/VueCesium%E9%94%99%E8%AF%AF%E8%AE%B0%E5%BD%95/"}],"tags":[{"name":"VueCesium","slug":"VueCesium","permalink":"http://example.com/tags/VueCesium/"}]},{"title":"hexo笔记三：字数统计和阅读时长","slug":"hexo笔记三：字数统计和阅读时长","date":"2021-09-01T12:53:18.000Z","updated":"2021-09-01T13:02:16.249Z","comments":true,"path":"2021/09/01/hexo笔记三：字数统计和阅读时长/","link":"","permalink":"http://example.com/2021/09/01/hexo%E7%AC%94%E8%AE%B0%E4%B8%89%EF%BC%9A%E5%AD%97%E6%95%B0%E7%BB%9F%E8%AE%A1%E5%92%8C%E9%98%85%E8%AF%BB%E6%97%B6%E9%95%BF/","excerpt":"","text":"1、安装插件npm install hexo-symbols-count-time --save ==注意：==若是出现以下错误，修改安装方法 npm install hexo-symbols-count-time --save --ignore-scripts 2、添加站内配置文件symbols_count_time: #文章内是否显示 symbols: true time: true # 网页底部是否显示 total_symbols: true total_time: true 3、修改主题配置文件symbols_count_time: separated_meta: true item_text_post: true item_text_total: true awl: 4 ＃计算字数的一个设置,没设置过 wpm: 275 ＃一分钟阅读的字数 4、显示效果","categories":[{"name":"next主题自定义","slug":"next主题自定义","permalink":"http://example.com/categories/next%E4%B8%BB%E9%A2%98%E8%87%AA%E5%AE%9A%E4%B9%89/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://example.com/tags/hexo/"}]},{"title":"hexo笔记二：文章加密","slug":"hexo笔记二：文章加密","date":"2021-09-01T11:55:35.000Z","updated":"2021-09-01T12:02:38.378Z","comments":true,"path":"2021/09/01/hexo笔记二：文章加密/","link":"","permalink":"http://example.com/2021/09/01/hexo%E7%AC%94%E8%AE%B0%E4%BA%8C%EF%BC%9A%E6%96%87%E7%AB%A0%E5%8A%A0%E5%AF%86/","excerpt":"","text":"1、安装插件npm install hexo-blog-encrypy 2、修改配置 在根目录的配置文件中添加以下代码： encrypt: enable: true 3、博客文章添加字段password: 密码 message: 输入密码界面提示说明 4、效果","categories":[{"name":"next主题自定义","slug":"next主题自定义","permalink":"http://example.com/categories/next%E4%B8%BB%E9%A2%98%E8%87%AA%E5%AE%9A%E4%B9%89/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://example.com/tags/hexo/"}]},{"title":"hexo笔记一：NEXT主题添加站内搜索功能","slug":"hexo笔记一：NEXT主题添加站内搜索功能","date":"2021-09-01T06:27:20.000Z","updated":"2021-09-01T13:02:23.684Z","comments":true,"path":"2021/09/01/hexo笔记一：NEXT主题添加站内搜索功能/","link":"","permalink":"http://example.com/2021/09/01/hexo%E7%AC%94%E8%AE%B0%E4%B8%80%EF%BC%9ANEXT%E4%B8%BB%E9%A2%98%E6%B7%BB%E5%8A%A0%E7%AB%99%E5%86%85%E6%90%9C%E7%B4%A2%E5%8A%9F%E8%83%BD/","excerpt":"","text":"1、安装插件npm install hexo-generator-search --save 2、更改主题配置文件local_search: enable: true # If auto, trigger search by changing input. # If manual, trigger search by pressing enter key or search button. trigger: auto # Show top n results per article, show all results by setting to -1 top_n_per_article: 1 # Unescape html strings to the readable one. unescape: false # Preload the search data when the page loads. preload: false 3、重新生成即可hexo clean hexo g hexo s 4、实现效果","categories":[{"name":"next主题自定义","slug":"next主题自定义","permalink":"http://example.com/categories/next%E4%B8%BB%E9%A2%98%E8%87%AA%E5%AE%9A%E4%B9%89/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://example.com/tags/hexo/"}]},{"title":"Hello World","slug":"hello-world","date":"2021-08-31T02:56:25.005Z","updated":"2021-09-01T08:21:22.753Z","comments":true,"path":"2021/08/31/hello-world/","link":"","permalink":"http://example.com/2021/08/31/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post$ hexo new \"My New Post\" More info: Writing Run server$ hexo server More info: Server Generate static files$ hexo generate More info: Generating Deploy to remote sites$ hexo deploy More info: Deployment","categories":[{"name":"笔记","slug":"笔记","permalink":"http://example.com/categories/%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"错误日志","slug":"错误日志","permalink":"http://example.com/tags/%E9%94%99%E8%AF%AF%E6%97%A5%E5%BF%97/"}]},{"title":"hexo博客起步","slug":"hexo博客起步","date":"2021-08-21T08:31:07.000Z","updated":"2021-09-05T01:25:47.843Z","comments":true,"path":"2021/08/21/hexo博客起步/","link":"","permalink":"http://example.com/2021/08/21/hexo%E5%8D%9A%E5%AE%A2%E8%B5%B7%E6%AD%A5/","excerpt":"","text":"怎么安装hexo博客https://hexo.io/zh-cn/ 新建文件夹hexo D:\\17.hexo\\hexo 在这个文件夹下，用git bash打开 输入以下命令安装hexo npm install hexo-cli -g 初始化博客 hexo init 新建完成后，指定的目录下会有一下文件 npm install npm install ejs@2.7.4 --ignore-scripts（报错的话需要先执行这个，再执行npm install） $ npm install npm WARN deprecated urix@0.1.0: Please see https://github.com/lydell/urix#deprecated npm WARN deprecated resolve-url@0.2.1: https://github.com/lydell/resolve-url#deprecated > ejs@2.7.4 postinstall D:\\17.hexo\\myblog\\node_modules\\ejs > node ./postinstall.js 'node' is not recognized as an internal or external command, operable program or batch file. npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.2 (node_modules\\chokidar\\node_modules\\fsevents): npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted &#123;\"os\":\"darwin\",\"arch\":\"any\"&#125; (current: &#123;\"os\":\"win32\",\"arch\":\"x64\"&#125;) npm ERR! code ELIFECYCLE npm ERR! errno 1 npm ERR! ejs@2.7.4 postinstall: `node ./postinstall.js` npm ERR! Exit status 1 npm ERR! npm ERR! Failed at the ejs@2.7.4 postinstall script. npm ERR! This is probably not a problem with npm. There is likely additional logging output above. npm ERR! A complete log of this run can be found in: npm ERR! C:\\Users\\Administrator\\AppData\\Roaming\\npm-cache\\_logs\\2021-08-31T02_56_54_451Z-debug.log 启动服务 hexo server hexo server INFO Validating config INFO Start processing INFO Hexo is running at http://localhost:4000 . Press Ctrl+C to stop. 访问地址 http://localhost:4000 新建一篇文章hexo new \"我的第一篇博客文章\" 查看新建的博客的地址 INFO Validating configINFO Created: D:\\17.hexo\\myblog\\source\\_posts\\我的第一篇博客文章.md ==找到这个文件，打开编辑即可。== hexo clean hexo g 重新启动服务 hexo server 访问地址 部署到github上 github上新建一个仓库 仓库名：==laowang-7.github.io== 安装部署插件 npm install --save hexo-deployer-git 修改项目中的_config.yml deploy: type: git repository: git@github.com:laowang-7&#x2F;laowang-7.github.io.git branch: master 部署 hexo d 更换next主题 去github上下载主题，把下载好的主题文件放到下面这个目录 D:\\17.hexo\\myblog\\themes 修改 D:\\17.hexo\\myblog 下面的_config.yml文件， theme: next 设置背景 下载背景依赖 放到D:\\17.hexo\\myblog\\themes\\next\\source\\lib文件夹下 修改主题文件夹下的_config.yml canvas_nest: enable: true color: \"0,0,255\" # RGB values, use ',' to separate opacity: 0.5 # the opacity of line: 0~1 zIndex: -1 # z-index property of the background count: 99 # the number of lines 设置博客阅读进度条 进入到主题文件夹下的_config.yml reading_progress: enable: true # Available values: top | bottom position: top color: \"#37c6c0\" height: 3px 设置文章浏览量和评论 用到第三方的系统 ==LeanClod== https://console.leancloud.cn/apps 创建一个应用，应用名称随便 创建class 设置主页面的友情链接 修改主题文件夹下的 Blog rolls 如下 # Blog rolls links_settings: icon: fa fa-link title: 友情链接 # Available values: block | inline layout: block #Title: http://yoursite.com links: 李文周: https://www.liwenzhou.com/ 博客园: http://www.cnblogs.com/penglei-it/ 辛未羊的博客: https://panqiincs.me/ 杜小帅: https://www.cnblogs.com/wangliukun/ 设置文章已阅读百分比 找到主题配置文件修改以下代码 back2top: enable: true # Back to top in sidebar. sidebar: false # Scroll percent label in b2t button. scrollpercent: true 实现效果 设置文章置顶显示 在需要置顶的文章的Front-matter中加上top: true 或者top: 任意数字，比如： title: VueCesium开发笔记一 top: 1000 date: 2021-09-04 22:16:52 tags: VueCesium categories: VueCesium笔记 toc: true description: vue-router应用到组件中时报错 top的数字越大越靠前 设置置顶标识 找到路径： themes\\next\\layout_macro\\post.swig 添加以下代码： &lt;div class&#x3D;&quot;post-meta&quot;&gt; &#123;% if post.top %&#125; &lt;i class&#x3D;&quot;fa fa-thumb-tack&quot;&gt;&lt;&#x2F;i&gt; &lt;font color&#x3D;7D26CD&gt;【置顶】&lt;&#x2F;font&gt; &lt;span class&#x3D;&quot;post-meta-divider&quot;&gt;|&lt;&#x2F;span&gt; &#123;% endif %&#125;","categories":[{"name":"next主题自定义","slug":"next主题自定义","permalink":"http://example.com/categories/next%E4%B8%BB%E9%A2%98%E8%87%AA%E5%AE%9A%E4%B9%89/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://example.com/tags/hexo/"}]}],"categories":[{"name":"Mysql","slug":"Mysql","permalink":"http://example.com/categories/Mysql/"},{"name":"next主题自定义","slug":"next主题自定义","permalink":"http://example.com/categories/next%E4%B8%BB%E9%A2%98%E8%87%AA%E5%AE%9A%E4%B9%89/"},{"name":"六级","slug":"六级","permalink":"http://example.com/categories/%E5%85%AD%E7%BA%A7/"},{"name":"Go","slug":"Go","permalink":"http://example.com/categories/Go/"},{"name":"大数据","slug":"大数据","permalink":"http://example.com/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"},{"name":"Python大数据实战","slug":"Python大数据实战","permalink":"http://example.com/categories/Python%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%AE%9E%E6%88%98/"},{"name":"快捷指令","slug":"快捷指令","permalink":"http://example.com/categories/%E5%BF%AB%E6%8D%B7%E6%8C%87%E4%BB%A4/"},{"name":"VueCesium错误记录","slug":"VueCesium错误记录","permalink":"http://example.com/categories/VueCesium%E9%94%99%E8%AF%AF%E8%AE%B0%E5%BD%95/"},{"name":"VueCesium笔记","slug":"VueCesium笔记","permalink":"http://example.com/categories/VueCesium%E7%AC%94%E8%AE%B0/"},{"name":"笔记","slug":"笔记","permalink":"http://example.com/categories/%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"Mysql","slug":"Mysql","permalink":"http://example.com/tags/Mysql/"},{"name":"hexo","slug":"hexo","permalink":"http://example.com/tags/hexo/"},{"name":"数据字典","slug":"数据字典","permalink":"http://example.com/tags/%E6%95%B0%E6%8D%AE%E5%AD%97%E5%85%B8/"},{"name":"翻译","slug":"翻译","permalink":"http://example.com/tags/%E7%BF%BB%E8%AF%91/"},{"name":"六级","slug":"六级","permalink":"http://example.com/tags/%E5%85%AD%E7%BA%A7/"},{"name":"GoLand","slug":"GoLand","permalink":"http://example.com/tags/GoLand/"},{"name":"练习3","slug":"练习3","permalink":"http://example.com/tags/%E7%BB%83%E4%B9%A03/"},{"name":"练习1","slug":"练习1","permalink":"http://example.com/tags/%E7%BB%83%E4%B9%A01/"},{"name":"练习2","slug":"练习2","permalink":"http://example.com/tags/%E7%BB%83%E4%B9%A02/"},{"name":"Python","slug":"Python","permalink":"http://example.com/tags/Python/"},{"name":"大数据","slug":"大数据","permalink":"http://example.com/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"},{"name":"快捷指令","slug":"快捷指令","permalink":"http://example.com/tags/%E5%BF%AB%E6%8D%B7%E6%8C%87%E4%BB%A4/"},{"name":"VueCesium","slug":"VueCesium","permalink":"http://example.com/tags/VueCesium/"},{"name":"错误日志","slug":"错误日志","permalink":"http://example.com/tags/%E9%94%99%E8%AF%AF%E6%97%A5%E5%BF%97/"}]}